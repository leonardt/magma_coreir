#!/usr/bin/env python
import sys, os
import argparse
import magma.testing.coroutine as coroutine
import magma.testing.newfunction as function

parser = argparse.ArgumentParser(description='Generate test vectors for a magma circuit')

parser.add_argument('-i', '--input', help="input magma .py file", required=True)
parser.add_argument('-o', '--output', help="output .vec file", required=True)
parser.add_argument('-n', '--num_cycles', type=int, help="number of cycles to test", required=True)
args = parser.parse_args()

sys.path.append(os.path.dirname(os.path.realpath(args.input)))

name = os.path.basename(args.input)
name = os.path.splitext(name)[0]
main = __import__(name).main
main_sim = __import__(name).main_sim

if isinstance(main_sim, type) and issubclass(main_sim, coroutine.Coroutine):
    testvectors = coroutine.testvectors(main, main_sim(), args.num_cycles)
    with open(args.output, "w") as vec:
        lines = []
        for outputs in testvectors:
            for port_name, value in outputs.items():
                vec.write(",".join(("expect", port_name, str(value))))
                vec.write("\n")
            vec.write("step, 1\n")
else:
    testvectors = function.testvectors(main, lambda x: bin(x).count('1'))

    with open(args.output, "w") as vec:
        lines = []
        for test in testvectors:
            for i, (name, port) in enumerate(main.interface.ports.items()):
                if port.isoutput():
                    vec.write("poke, {}, {}\n".format(name, test[i]))
            for i, (name, port) in enumerate(main.interface.ports.items()):
                if port.isinput():
                    vec.write("expect, {}, {}\n".format(name, test[i]))
